# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FEAWS5v8AAblXHa7VXEhWKkzU_PX5AkV
"""

import streamlit as st
import pandas as pd
import datetime

st.set_page_config(page_title="WFTP Project", layout="wide")
st.title("\U0001F50D Monitoring Proses Picking Zona")

uploaded_file = st.file_uploader("Upload file Excel", type=["xlsx", "xls"])

# Load referensi zona dari file lokal
try:
    df_zona = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona")
    df_zona_ps1 = pd.read_excel("referensi_zona.xlsx", sheet_name="Zona PS1")
except Exception as e:
    st.error(f"Gagal load data referensi zona: {e}")
    st.stop()

if uploaded_file:
    try:
        if uploaded_file.name.endswith(".xls"):
            df_raw = pd.read_excel(uploaded_file, sheet_name=0, engine="xlrd")
        else:
            df_raw = pd.read_excel(uploaded_file, sheet_name=0)
    except Exception as e:
        st.error(f"Gagal baca sheet dari file user: {e}")
        st.stop()

    df = df_raw.copy()
    df.columns = df.columns.str.strip()

    column_mapping = {
        'Confirm Date': 'Confirm date',
        'Confirm Time': 'Confirm time',
        'Qty': 'Qty',
        'Flag': 'Flag',
        'Wavepick Created': 'Wavepick created',
        'Wavepick No': 'Wavepick',
        'Stype': 'STYPE',
        'Material ID': 'MID',
        'Description': 'Description'
    }
    df = df.rename(columns=column_mapping)

    required_columns = list(column_mapping.values())
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        st.error(f"File yang diupload tidak mengandung kolom berikut: {', '.join(missing_columns)}")
        st.stop()

    df['Confirm date'] = pd.to_datetime(df['Confirm date'], errors='coerce')
    df['Confirm time'] = pd.to_datetime(df['Confirm time'], errors='coerce')
    df['Wavepick created'] = pd.to_datetime(df['Wavepick created'], errors='coerce')

    stype_to_zona = df_zona.groupby('STYPE')['ZONA'].first().to_dict()

    df['ZONA'] = df['STYPE'].map(stype_to_zona)
    df = df.merge(df_zona_ps1, on='MID', how='left', suffixes=('', '_ps1'))
    df['ZONA'] = df['ZONA_ps1'].combine_first(df['ZONA'])
    df = df.drop(columns=['ZONA_ps1'])

    zona_map = {
        'ZAA': 'A',
        'ZAB': 'BK',
        'ZAC': 'CJ',
        'ZAL': 'L'
    }
    df['ZONA'] = df['ZONA'].replace(zona_map)
    df['ZONA'] = df['ZONA'].fillna('Unmapped')

    # ZONA SUMMARY - MONITORING
    df_monitor = df[(df['Qty'] > 0) & (df['Flag'] == 'A') & (~df['ZONA'].isin(['Unmapped', 'Unnamed']))].copy()

    # Hitung jumlah MID Flag A per wavepick dan per zona
    flag_a_counts = df_monitor.groupby(['Wavepick', 'ZONA'])['MID'].nunique().reset_index(name='MID_flag_A_count')

    # Ambil wavepick-zona yang memiliki MID_flag_A_count >= 3
    valid_wavepick_zona = flag_a_counts[flag_a_counts['MID_flag_A_count'] >= 3][['Wavepick', 'ZONA']]

    # Gabungkan kembali ke df_monitor untuk filter data
    df_monitor = df_monitor.merge(valid_wavepick_zona, on=['Wavepick', 'ZONA'], how='inner')

    # Tambahan filter: Exclude wavepick jika SEMUA confirm time-nya 00:00:00
    df_confirm_check = df.groupby('Wavepick')['Confirm time'].apply(lambda x: not (x.dt.time == datetime.time(0, 0)).all()).reset_index()
    df_confirm_check = df_confirm_check.rename(columns={'Confirm time': 'has_valid_confirm'})

    df_monitor = df_monitor.merge(df_confirm_check, on='Wavepick', how='left')
    df_monitor = df_monitor[df_monitor['has_valid_confirm']]

    zona_summary = df_monitor.groupby('ZONA').agg(
        Jumlah_Wavepick=('Wavepick', 'nunique'),
        Total_Qty=('Qty', 'sum'),
        Total_Material_ID=('MID', 'nunique')
    ).reset_index()

    st.subheader("\U0001F4CB Tabel Monitoring per Zona (Flag A)")
    st.dataframe(zona_summary, use_container_width=True)

    # MENU ALERT UNTUK STYPE RB1 YANG BELUM DIPICK
    st.subheader("\U0001F6A8 Item 'Belum Dipick Operator' - STYPE RB1")
    rb1_alert = df[(df['STYPE'] == 'RB1') & (df['Flag'] == 'A')]
    if not rb1_alert.empty:
        rb1_alert = rb1_alert[['Wavepick', 'MID', 'Description', 'Qty', 'ZONA']]
        st.dataframe(rb1_alert.sort_values(by='Wavepick'), use_container_width=True)
    else:
        st.info("Tidak ada item STYPE RB1 yang belum dipick.")

else:
    st.info("Silakan upload file Excel untuk mulai.")